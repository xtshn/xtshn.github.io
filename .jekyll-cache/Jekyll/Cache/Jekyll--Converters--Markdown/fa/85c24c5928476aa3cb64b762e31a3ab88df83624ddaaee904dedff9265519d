I"•q<h1 id="100-same-tree"><a href="https://leetcode.com/problems/same-tree/">100. Same Tree</a></h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
</span><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isSameTree</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">p</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">,</span> <span class="n">q</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">q</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">p</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        
        <span class="k">if</span> <span class="n">p</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">q</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">p</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">val</span> <span class="ow">and</span> <span class="bp">self</span><span class="p">.</span><span class="n">isSameTree</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">q</span><span class="p">.</span><span class="n">left</span><span class="p">)</span> <span class="ow">and</span> <span class="bp">self</span><span class="p">.</span><span class="n">isSameTree</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">q</span><span class="p">.</span><span class="n">right</span><span class="p">)</span>

        <span class="k">return</span> <span class="bp">False</span>
</code></pre></div></div>

<h1 id="707-design-linked-list"><a href="https://leetcode.com/problems/design-linked-list/">707. Design Linked List</a></h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Node</span><span class="p">:</span>
	<span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">val</span><span class="p">):</span>
		<span class="bp">self</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">val</span>
		<span class="bp">self</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="bp">None</span>
		<span class="bp">self</span><span class="p">.</span><span class="n">prev</span> <span class="o">=</span> <span class="bp">None</span>

<span class="k">class</span> <span class="nc">MyLinkedList</span><span class="p">:</span>

	<span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
		<span class="s">"""
		Initialize your data structure here.
		"""</span>
		<span class="bp">self</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="mi">0</span>
		<span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="bp">None</span>
		<span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="bp">None</span>


	<span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">index</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
		<span class="s">"""
		Get the value of the index-th node in the linked list. If the index is invalid, return -1.
		"""</span>
		<span class="k">if</span> <span class="n">index</span> <span class="o">&gt;=</span> <span class="bp">self</span><span class="p">.</span><span class="n">size</span> <span class="ow">or</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
			<span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
		<span class="k">else</span><span class="p">:</span>
			<span class="n">node</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">getIdxNode</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
			<span class="k">return</span> <span class="n">node</span><span class="p">.</span><span class="n">val</span>


	<span class="k">def</span> <span class="nf">addAtHead</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">val</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
		<span class="s">"""
		Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.
		"""</span>
		<span class="n">newNode</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
		<span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
			<span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">newNode</span>
			<span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="n">newNode</span>
		<span class="k">else</span><span class="p">:</span>
			<span class="c1">#this also covers the case when size == 1, just think
</span>			<span class="n">newNode</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span>
			<span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="n">prev</span> <span class="o">=</span> <span class="n">newNode</span>
			<span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">newNode</span>
		<span class="bp">self</span><span class="p">.</span><span class="n">size</span> <span class="o">+=</span> <span class="mi">1</span>


	<span class="k">def</span> <span class="nf">addAtTail</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">val</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
		<span class="s">"""
		Append a node of value val to the last element of the linked list.
		"""</span>
		<span class="n">newNode</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
		<span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
			<span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">newNode</span>
			<span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="n">newNode</span>
		<span class="k">else</span><span class="p">:</span>
			<span class="n">newNode</span><span class="p">.</span><span class="n">prev</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">tail</span>
			<span class="bp">self</span><span class="p">.</span><span class="n">tail</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">newNode</span>
			<span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="n">newNode</span>
		<span class="bp">self</span><span class="p">.</span><span class="n">size</span> <span class="o">+=</span> <span class="mi">1</span>

	<span class="k">def</span> <span class="nf">addAtIndex</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">index</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">val</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
		<span class="s">"""
		Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.
		"""</span>
		<span class="k">if</span> <span class="n">index</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
			<span class="c1">#add at head
</span>			<span class="bp">self</span><span class="p">.</span><span class="n">addAtHead</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
		<span class="k">elif</span> <span class="n">index</span> <span class="o">==</span> <span class="bp">self</span><span class="p">.</span><span class="n">size</span><span class="p">:</span>
			<span class="c1">#add at tail
</span>			<span class="bp">self</span><span class="p">.</span><span class="n">addAtTail</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
		<span class="k">elif</span> <span class="n">index</span> <span class="o">&lt;=</span> <span class="bp">self</span><span class="p">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
			<span class="n">newNode</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
			<span class="n">idxNode</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">getIdxNode</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
			<span class="c1">#set pointers for newNode
</span>			<span class="n">newNode</span><span class="p">.</span><span class="n">prev</span> <span class="o">=</span> <span class="n">idxNode</span><span class="p">.</span><span class="n">prev</span>
			<span class="n">newNode</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">idxNode</span>

			<span class="c1">#update idxNode.prev
</span>			<span class="n">idxNode</span><span class="p">.</span><span class="n">prev</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">newNode</span>

			<span class="c1">#idxNode
</span>			<span class="n">idxNode</span><span class="p">.</span><span class="n">prev</span> <span class="o">=</span> <span class="n">newNode</span>

			<span class="bp">self</span><span class="p">.</span><span class="n">size</span> <span class="o">+=</span> <span class="mi">1</span>

	<span class="k">def</span> <span class="nf">deleteAtIndex</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">index</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
		<span class="s">"""
		Delete the index-th node in the linked list, if the index is valid.
		"""</span>
		<span class="k">if</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">index</span> <span class="o">&gt;=</span> <span class="bp">self</span><span class="p">.</span><span class="n">size</span><span class="p">:</span>
			<span class="k">return</span>

		<span class="k">if</span> <span class="n">index</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
			<span class="c1">#delete from head
</span>			<span class="bp">self</span><span class="p">.</span><span class="n">deleteHead</span><span class="p">()</span>
		<span class="k">elif</span> <span class="n">index</span> <span class="o">==</span> <span class="bp">self</span><span class="p">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
			<span class="c1"># delete from tail
</span>			<span class="bp">self</span><span class="p">.</span><span class="n">deleteTail</span><span class="p">()</span>
		<span class="k">else</span><span class="p">:</span>
			<span class="n">idxNode</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">getIdxNode</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
			<span class="n">idxNode</span><span class="p">.</span><span class="n">prev</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">idxNode</span><span class="p">.</span><span class="nb">next</span>
			<span class="n">idxNode</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">prev</span> <span class="o">=</span> <span class="n">idxNode</span><span class="p">.</span><span class="n">prev</span>
			<span class="k">del</span> <span class="n">idxNode</span>

		<span class="bp">self</span><span class="p">.</span><span class="n">size</span> <span class="o">-=</span> <span class="mi">1</span>

	<span class="k">def</span> <span class="nf">getIdxNode</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">idx</span><span class="p">):</span>
		<span class="n">tmp</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span>
		<span class="k">while</span> <span class="n">idx</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
			<span class="n">tmp</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">.</span><span class="nb">next</span>
			<span class="n">idx</span> <span class="o">-=</span> <span class="mi">1</span>

		<span class="k">return</span> <span class="n">tmp</span> 

	<span class="k">def</span> <span class="nf">deleteHead</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
		<span class="n">oldHead</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span>
		<span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
			<span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">==</span> <span class="bp">None</span>
			<span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">==</span> <span class="bp">None</span>
		<span class="k">else</span><span class="p">:</span>    
			<span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">prev</span> <span class="o">=</span> <span class="bp">None</span>
			<span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="nb">next</span>
		<span class="k">del</span> <span class="n">oldHead</span>

	<span class="k">def</span> <span class="nf">deleteTail</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
		<span class="n">oldTail</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">tail</span>
		<span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
			<span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">==</span> <span class="bp">None</span>
			<span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">==</span> <span class="bp">None</span>
		<span class="k">else</span><span class="p">:</span>
			<span class="bp">self</span><span class="p">.</span><span class="n">tail</span><span class="p">.</span><span class="n">prev</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="bp">None</span>
			<span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">tail</span><span class="p">.</span><span class="n">prev</span>
		<span class="k">del</span> <span class="n">oldTail</span>
        
<span class="c1"># Your MyLinkedList object will be instantiated and called as such:
# obj = MyLinkedList()
# param_1 = obj.get(index)
# obj.addAtHead(val)
# obj.addAtTail(val)
# obj.addAtIndex(index,val)
# obj.deleteAtIndex(index)
</span></code></pre></div></div>

<h1 id="21-merge-two-sorted-lists"><a href="https://leetcode.com/problems/merge-two-sorted-lists/">21. Merge Two Sorted Lists</a></h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
</span><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">mergeTwoLists</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">l1</span><span class="p">:</span> <span class="n">ListNode</span><span class="p">,</span> <span class="n">l2</span><span class="p">:</span> <span class="n">ListNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ListNode</span><span class="p">:</span>
        <span class="n">curr</span> <span class="o">=</span> <span class="n">NodeList</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="n">dummy</span>

        <span class="k">while</span> <span class="n">l1</span> <span class="ow">and</span> <span class="n">l2</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">l1</span><span class="p">.</span><span class="n">val</span> <span class="o">&lt;</span> <span class="n">l2</span><span class="p">.</span><span class="n">val</span><span class="p">:</span>
                <span class="n">curr</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">l1</span>
                <span class="n">l1</span> <span class="o">=</span> <span class="n">l1</span><span class="p">.</span><span class="nb">next</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">curr</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">l2</span>
                <span class="n">l2</span> <span class="o">=</span> <span class="n">l2</span><span class="p">.</span><span class="nb">next</span>
            <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="p">.</span><span class="nb">next</span>
        <span class="n">curr</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">l1</span> <span class="ow">or</span> <span class="n">l2</span>
</code></pre></div></div>

<h1 id="2-add-two-numbers"><a href="https://leetcode.com/problems/add-two-numbers/">2. Add Two Numbers</a></h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
</span><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">addTwoNumbers</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">l1</span><span class="p">:</span> <span class="n">ListNode</span><span class="p">,</span> <span class="n">l2</span><span class="p">:</span> <span class="n">ListNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ListNode</span><span class="p">:</span>
        <span class="n">carry</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">dummy</span> <span class="o">=</span> <span class="n">NodeList</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">dummy</span>

        <span class="k">while</span> <span class="n">l1</span> <span class="ow">and</span> <span class="n">l2</span><span class="p">:</span>
            <span class="n">p</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">ListNode</span><span class="p">((</span><span class="n">l1</span><span class="p">.</span><span class="n">val</span> <span class="o">+</span> <span class="n">l2</span><span class="p">.</span><span class="n">val</span> <span class="o">+</span> <span class="n">carry</span><span class="p">)</span><span class="o">%</span><span class="mi">10</span><span class="p">)</span>
            <span class="n">carry</span> <span class="o">=</span> <span class="p">(</span><span class="n">l1</span><span class="p">.</span><span class="n">val</span><span class="o">+</span><span class="n">l2</span><span class="p">.</span><span class="n">val</span><span class="p">)</span><span class="o">//</span><span class="mi">10</span>
            <span class="n">l1</span> <span class="o">=</span> <span class="n">l1</span><span class="p">.</span><span class="nb">next</span>
            <span class="n">l2</span> <span class="o">=</span> <span class="n">l2</span><span class="p">.</span><span class="nb">next</span>
            <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nb">next</span>
        
        <span class="k">if</span> <span class="n">l1</span><span class="p">:</span>
            <span class="k">while</span> <span class="n">l1</span><span class="p">:</span>
                <span class="n">p</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">ListNode</span><span class="p">((</span><span class="n">l1</span><span class="p">.</span><span class="n">val</span> <span class="o">+</span> <span class="n">carry</span><span class="p">)</span><span class="o">%</span><span class="mi">10</span><span class="p">)</span>
                <span class="n">carry</span> <span class="o">=</span> <span class="p">(</span><span class="n">l1</span><span class="p">.</span><span class="n">val</span><span class="o">+</span><span class="n">carry</span><span class="p">)</span><span class="o">//</span><span class="mi">10</span>
                <span class="n">l1</span> <span class="o">=</span> <span class="n">l1</span><span class="p">.</span><span class="nb">next</span>
                <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nb">next</span>
        
        <span class="k">if</span> <span class="n">l2</span><span class="p">:</span>
            <span class="k">while</span> <span class="n">l2</span><span class="p">:</span>
                <span class="n">p</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">ListNode</span><span class="p">((</span><span class="n">l2</span><span class="p">.</span><span class="n">val</span><span class="o">+</span><span class="n">carry</span><span class="p">)</span><span class="o">%</span><span class="mi">10</span><span class="p">)</span>
                <span class="n">carry</span> <span class="o">=</span> <span class="p">(</span><span class="n">l2</span><span class="p">.</span><span class="n">val</span><span class="o">+</span><span class="n">carry</span><span class="p">)</span><span class="o">//</span><span class="mi">10</span>
                <span class="n">l2</span> <span class="o">=</span> <span class="n">l2</span><span class="p">.</span><span class="nb">next</span>
                <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nb">next</span>

        <span class="k">if</span> <span class="n">carry</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">p</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">ListNode</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">dummy</span><span class="p">.</span><span class="nb">next</span>

</code></pre></div></div>

<h1 id="138-copy-list-with-random-pointer"><a href="https://leetcode.com/problems/copy-list-with-random-pointer/">138. Copy List with Random Pointer</a></h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"""
# Definition for a Node.
class Node:
    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):
        self.val = int(x)
        self.next = next
        self.random = random
"""</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">copyRandomList</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">:</span> <span class="s">'Node'</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="s">'Node'</span><span class="p">:</span>
        <span class="n">dic</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
        <span class="n">m</span> <span class="o">=</span> <span class="n">n</span> <span class="o">=</span> <span class="n">head</span>

        <span class="k">while</span> <span class="n">m</span><span class="p">:</span>
            <span class="n">dic</span><span class="p">[</span><span class="n">m</span><span class="p">]</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
            <span class="n">m</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="nb">next</span>
        <span class="k">while</span> <span class="n">n</span><span class="p">:</span>
            <span class="n">dic</span><span class="p">[</span><span class="n">n</span><span class="p">].</span><span class="nb">next</span> <span class="o">=</span> <span class="n">dic</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">n</span><span class="p">.</span><span class="nb">next</span><span class="p">)</span>
            <span class="n">dic</span><span class="p">[</span><span class="n">n</span><span class="p">].</span><span class="n">random</span> <span class="o">=</span> <span class="n">dic</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">n</span><span class="p">.</span><span class="n">random</span><span class="p">)</span>
            <span class="n">n</span> <span class="o">=</span> <span class="n">n</span><span class="p">.</span><span class="nb">next</span>
        <span class="k">return</span> <span class="n">dic</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">head</span><span class="p">)</span> <span class="c1"># don\t really understand... 
</span></code></pre></div></div>
:ET