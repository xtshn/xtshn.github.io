I"©<h1 id="19-remove-nth-node-from-end-of-list"><a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/">19. Remove Nth Node From End of List</a></h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">removeNthFromEnd</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">:</span> <span class="n">ListNode</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ListNode</span><span class="p">:</span>
        <span class="n">dummy</span> <span class="o">=</span> <span class="n">ListNode</span><span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="s">'-inf))
        dummy = head
        slow = fast = dummy
        for _ in range(n):
            fast = fast.next
        while fast.next: # if it was fast, then it would end up at the one needed to be deleted. Then the slow pointer would lose the reference from the previous one. 
            slow = slow.next
            fast = fast.next
        slow.next = slow.next.next
        return dummy.next        
</span></code></pre></div></div>

<h1 id="430-flatten-a-multilevel-doubly-linked-list"><a href="https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list/">430. Flatten a Multilevel Doubly Linked List</a></h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"""
# Definition for a Node.
class Node:
    def __init__(self, val, prev, next, child):
        self.val = val
        self.prev = prev
        self.next = next
        self.child = child
"""</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">flatten</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">:</span> <span class="s">'Node'</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="s">'Node'</span><span class="p">:</span>
        <span class="n">curr</span> <span class="o">=</span> <span class="n">head</span>
        <span class="n">stack</span> <span class="o">=</span><span class="p">[]</span>

        <span class="k">while</span> <span class="n">head</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">head</span><span class="p">.</span><span class="n">child</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">head</span><span class="p">.</span><span class="nb">next</span><span class="p">:</span>
                    <span class="n">stack</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">head</span><span class="p">.</span><span class="nb">next</span><span class="p">)</span>
                <span class="n">head</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">head</span><span class="p">.</span><span class="n">child</span>
                <span class="n">head</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">prev</span> <span class="o">=</span> <span class="n">head</span>
                <span class="n">head</span><span class="p">.</span><span class="n">child</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="k">elif</span> <span class="ow">not</span> <span class="n">head</span><span class="p">.</span><span class="nb">next</span> <span class="ow">and</span> <span class="n">stack</span><span class="p">:</span>
                <span class="n">head</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>
                <span class="n">head</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">prev</span> <span class="o">=</span> <span class="n">head</span>
            <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="p">.</span><span class="nb">next</span>
        <span class="k">return</span> <span class="n">temp</span>
</code></pre></div></div>

<h1 id="206-reverse-linked-list"><a href="https://leetcode.com/problems/reverse-linked-list/">206. Reverse Linked List</a></h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
</span><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">reverseList</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">:</span> <span class="n">ListNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ListNode</span><span class="p">:</span>
        <span class="n">curr</span> <span class="o">=</span> <span class="n">head</span>
        <span class="n">prev</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">while</span> <span class="n">curr</span><span class="p">:</span>
            <span class="n">curr</span><span class="p">.</span><span class="nb">next</span><span class="p">,</span> <span class="n">prev</span><span class="p">,</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">prev</span><span class="p">,</span> <span class="n">curr</span><span class="p">,</span> <span class="n">curr</span><span class="p">.</span><span class="nb">next</span>
        <span class="k">return</span> <span class="n">prev</span>
</code></pre></div></div>

<h1 id="203-remove-linked-list-elements"><a href="https://leetcode.com/problems/remove-linked-list-elements/">203. Remove Linked List Elements</a></h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1"># Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
</span><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">removeElements</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">:</span> <span class="n">ListNode</span><span class="p">,</span> <span class="n">val</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ListNode</span><span class="p">:</span>
        <span class="n">dummy</span> <span class="o">=</span> <span class="n">ListNode</span><span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="s">'-inf))
        dummy.next = head
        prev, curr = dummy, dummy.next

        while curr:
            if curr == val:
                prev.next = curr.next
            else:
                prev = curr
            curr = curr.next
        return dummy.next
</span></code></pre></div></div>
:ET